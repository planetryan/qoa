{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/libc-927e8a047d72c591/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/libc-9c08b7e87134fbf3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/proc-macro2-40a73133429c5d09/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libunicode_ident-b4873088a22f7d02.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libunicode_ident-b4873088a22f7d02.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcfg_if-63d34a3ffcbc64a7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcfg_if-63d34a3ffcbc64a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/autocfg-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libautocfg-c8a24474dd0da3ef.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libautocfg-c8a24474dd0da3ef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libshlex-1b2582e27ba4b96a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libshlex-1b2582e27ba4b96a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/libm-7efa453bbfdd6fa1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","serde_derive","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/serde-d60b1ae69e28dcd6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libstable_deref_trait-ca1807d78f85a858.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libstable_deref_trait-ca1807d78f85a858.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libonce_cell-56a4c81544336919.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libonce_cell-56a4c81544336919.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpin_project_lite-d9d08379629d6c34.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpin_project_lite-d9d08379629d6c34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libitoa-0a0bb124e3071e38.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libitoa-0a0bb124e3071e38.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/zerocopy-819fa48cd7f785ad/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/crossbeam-utils-25dc181c87c6cefb/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbytes-ff7d9c56acc6519a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbytes-ff7d9c56acc6519a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwriteable-d3d9641e6a84f807.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwriteable-d3d9641e6a84f807.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsmallvec-40029459cc1c9221.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsmallvec-40029459cc1c9221.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblitemap-86bf7d65383dd361.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblitemap-86bf7d65383dd361.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/icu_normalizer_data-e706a36c6bfeda6f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/getrandom-b62be231e996b347/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/icu_properties_data-04be5bf3d18d2e29/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","use_std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libeither-2fbf7ef60a48d2a5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libeither-2fbf7ef60a48d2a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_core-cb3de448eacaa000.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_core-cb3de448eacaa000.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libuntrusted-5e2fabd887eb200a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libuntrusted-5e2fabd887eb200a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcpkg-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"vcpkg","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/vcpkg-0.2.15/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libvcpkg-47642627c2d56077.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libvcpkg-47642627c2d56077.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfnv-0e021f58c55c06e9.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfnv-0e021f58c55c06e9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblog-8f13e34b535d6193.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblog-8f13e34b535d6193.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pkg-config-0.3.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpkg_config-09dc51a603f3054e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpkg_config-09dc51a603f3054e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/rayon-core-c6b12e7e850b81ad/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/crc32fast-51004cf7987b5dfa/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libryu-bd84d1d2d08f639a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libryu-bd84d1d2d08f639a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_sink-c63e50f00598c002.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_sink-c63e50f00598c002.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libc-0.2.174/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblibc-e793f202e807cdf0.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblibc-e793f202e807cdf0.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro","proc_macro_span"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/proc-macro2-4ce1ab62a11ecb12/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cc-1.2.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcc-f429f6d441ca3eae.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcc-f429f6d441ca3eae.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","linked_libs":[],"linked_paths":[],"cfgs":["arch_enabled"],"env":[["CFG_CARGO_FEATURES","[\"arch\", \"default\"]"],["CFG_OPT_LEVEL","1"],["CFG_TARGET_FEATURES","[\"adx\", \"aes\", \"avx\", \"avx2\", \"avx512bf16\", \"avx512bitalg\", \"avx512bw\", \"avx512cd\", \"avx512dq\", \"avx512f\", \"avx512ifma\", \"avx512vbmi\", \"avx512vbmi2\", \"avx512vl\", \"avx512vnni\", \"avx512vp2intersect\", \"avx512vpopcntdq\", \"avxvnni\", \"bmi1\", \"bmi2\", \"cmpxchg16b\", \"f16c\", \"fma\", \"fxsr\", \"gfni\", \"lahfsahf\", \"lzcnt\", \"movbe\", \"pclmulqdq\", \"popcnt\", \"prfchw\", \"rdrand\", \"rdseed\", \"sha\", \"sse\", \"sse2\", \"sse3\", \"sse4.1\", \"sse4.2\", \"sse4a\", \"ssse3\", \"vaes\", \"vpclmulqdq\", \"x87\", \"xsave\", \"xsavec\", \"xsaveopt\", \"xsaves\"]"]],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/libm-306e150c5b6d7840/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/num-traits-280ad63edf7312b9/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/serde-f31bb8d09be181a0/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/crossbeam-utils-37262b7e1a5ffdc3/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/zerocopy-2290af1fa30d6898/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/icu_properties_data-79d276e190571f52/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/getrandom-44936cacca16817f/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/icu_normalizer_data-36af9be4c3b0218a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.34","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["once_cell","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtracing_core-76e909fa9a19b647.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtracing_core-76e909fa9a19b647.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@0.2.12","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhttp-8fa6cedf47577056.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhttp-8fa6cedf47577056.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/rayon-core-f9f79a9aaf38d6d7/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libequivalent-d8b1ce5367415229.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libequivalent-d8b1ce5367415229.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_task-4aa19a6412a767ac.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_task-4aa19a6412a767ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/serde_json-0da8620936c7033c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhashbrown-483be177ab45e638.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhashbrown-483be177ab45e638.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.23.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck-1.23.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytemuck","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bytemuck-1.23.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["extern_crate_alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbytemuck-b8bedc9ed1723341.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbytemuck-b8bedc9ed1723341.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simd-adler32@0.3.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simd_adler32","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simd-adler32-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const-generics","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsimd_adler32-fd5d2e75fdecde70.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsimd_adler32-fd5d2e75fdecde70.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8parse@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8parse-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8parse","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8parse-0.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libutf8parse-c666a1390628cca0.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libutf8parse-c666a1390628cca0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.21.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.21.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/rustls-51b50ba61d92e28c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpin_utils-c6f24a31fc9d7c7e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpin_utils-c6f24a31fc9d7c7e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/httparse-12d0fda5747056e3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.10","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matrixmultiply-0.3.10/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matrixmultiply-0.3.10/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cgemm","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/matrixmultiply-53b147671f2abace/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","linked_libs":[],"linked_paths":[],"cfgs":["stable_arm_crc32_intrinsics"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/crc32fast-3725043766104f5d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/lock_api-fd4a6d192db7093c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libmemchr-0d647b03e4be0da6.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libmemchr-0d647b03e4be0da6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-query@1.1.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-query-1.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_query","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-query-1.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle_query-dbc445f780d22afa.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle_query-dbc445f780d22afa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/paste-1fa5d5b9baac8242/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/parking_lot_core-cf5c2d12bad033e3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is_terminal_polyfill@1.70.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is_terminal_polyfill-1.70.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal_polyfill","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is_terminal_polyfill-1.70.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libis_terminal_polyfill-837aa201fffa1de2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libis_terminal_polyfill-837aa201fffa1de2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/proc-macro2-1.0.95/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libproc_macro2-fd14d19aa6d04a82.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libproc_macro2-fd14d19aa6d04a82.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/num-traits-ec1ad739078f0c01/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libm-0.2.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arch","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblibm-b8935baa6476c4e2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblibm-b8935baa6476c4e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libgetrandom-c130a89694cde2b2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libgetrandom-c130a89694cde2b2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/ring-578b16ded36e8e4e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_utils-518942d4452fa82a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_utils-518942d4452fa82a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerocopy-0.8.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerocopy-ecb5d4d760a62ff3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzerocopy-ecb5d4d760a62ff3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mio-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libmio-bb25580b3ae51ef4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libmio-bb25580b3ae51ef4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.6.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsocket2-e228582c5b8d3860.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsocket2-e228582c5b8d3860.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-src@300.5.1+3.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-src-300.5.1+3.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_src","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-src-300.5.1+3.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","legacy"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl_src-cf20a7e559524f57.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl_src-cf20a7e559524f57.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_normalizer_data-a3785986a90c02d8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_normalizer_data-a3785986a90c02d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libgetrandom-eb533e18c761af32.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libgetrandom-eb533e18c761af32.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_properties_data-b874911d1f84a4e4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_properties_data-b874911d1f84a4e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libindexmap-29dc6543602e3118.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libindexmap-29dc6543602e3118.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtracing-f6ef8ba7df1e087e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtracing-f6ef8ba7df1e087e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_util-8b5c5015f8e8e55a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_util-8b5c5015f8e8e55a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd","httparse_simd_target_feature_sse42","httparse_simd_target_feature_avx2"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/httparse-be2e750734c105ef/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-parse@0.2.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-parse-0.2.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_parse","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-parse-0.2.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","utf8"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle_parse-6d64bbf8c9ba6c0d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle_parse-6d64bbf8c9ba6c0d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/serde_json-c9f292372393c9d6/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle@1.0.11","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstyle-1.0.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle-2440d36b5cd87cde.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libanstyle-2440d36b5cd87cde.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#try-lock@0.2.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"try_lock","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtry_lock-0e143361f897a5fb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtry_lock-0e143361f897a5fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#colorchoice@1.0.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"colorchoice","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/colorchoice-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcolorchoice-9eaf45ad946be81a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcolorchoice-9eaf45ad946be81a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpercent_encoding-2e075389988a5da4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpercent_encoding-2e075389988a5da4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libadler2-438b01acc0c2ff90.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libadler2-438b01acc0c2ff90.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/slab-0.4.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libslab-585b531ce048c555.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libslab-585b531ce048c555.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.10","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.5.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/socket2-0.5.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsocket2-f29f76c6cf5d63cb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsocket2-f29f76c6cf5d63cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@0.4.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhttp_body-807e87a4a00773d7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhttp_body-807e87a4a00773d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#safe_arch@0.7.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/safe_arch-0.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"safe_arch","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/safe_arch-0.7.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsafe_arch-50db8d24273ccf08.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsafe_arch-50db8d24273ccf08.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/lock_api-805a4517d20e7d7d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crc32fast-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcrc32fast-8c910022e4b09dec.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcrc32fast-8c910022e4b09dec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jemalloc-sys@0.5.4+5.3.0-patched","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemalloc-sys-0.5.4+5.3.0-patched/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemalloc-sys-0.5.4+5.3.0-patched/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["background_threads_runtime_support"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/jemalloc-sys-edf673ab7f03f2d6/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.10","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/matrixmultiply-de1b0fd9b133e4a9/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libquote-ed3edcc35f9232b8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libquote-ed3edcc35f9232b8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnum_traits-a423958623a40670.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnum_traits-a423958623a40670.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","linked_libs":["static=ring_core_0_17_14_","static=ring_core_0_17_14__test"],"linked_paths":["native=/home/rayan/Documents/git/qoa/target/debug/build/ring-968f6fdfef8ff6ad/out"],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/ring-968f6fdfef8ff6ad/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libppv_lite86-5a159fd5dbf335d7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libppv_lite86-5a159fd5dbf335d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.47.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","io-util","libc","mio","net","rt","socket2","sync","time"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtokio-61a7309284e2ae46.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtokio-61a7309284e2ae46.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_epoch-7323cc902a212a3f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_epoch-7323cc902a212a3f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/build/main.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["openssl-src","vendored"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/openssl-sys-e5be149ba63cc564/build-script-main"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_core-017a82c76b2a2ed8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_core-017a82c76b2a2ed8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_core-5a11a474b5e7eb12.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_core-5a11a474b5e7eb12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstream@0.6.20","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstream-0.6.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstream","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anstream-0.6.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto","default","wincon"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libanstream-add647c2d1a89deb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libanstream-add647c2d1a89deb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","simd","simd-adler32","with-alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libminiz_oxide-7a646408a64fadcd.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libminiz_oxide-7a646408a64fadcd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#want@0.3.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"want","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwant-188e9b3bbfe8b977.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwant-188e9b3bbfe8b977.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libform_urlencoded-b265546b86fbcf8a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libform_urlencoded-b265546b86fbcf8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhttparse-720425cc214adc9d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhttparse-720425cc214adc9d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/paste-f390789fb8427e71/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/ring-8e8b27b60f247281/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/parking_lot_core-371b3d312620f410/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#half@2.6.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/half-2.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"half","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/half-2.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhalf-ff593faf24497117.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhalf-ff593faf24497117.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_channel-96b824387e19c582.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfutures_channel-96b824387e19c582.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-2.9.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbitflags-a82e1edcc0822df2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbitflags-a82e1edcc0822df2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#plotters-backend@0.3.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-backend-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"plotters_backend","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-backend-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libplotters_backend-a66883b8d4054d61.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libplotters_backend-a66883b8d4054d61.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httpdate","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhttpdate-c81afa16d5cda0b6.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhttpdate-c81afa16d5cda0b6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libregex_syntax-996c5b11cdce54eb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libregex_syntax-996c5b11cdce54eb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/heck-0.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libheck-2eb97a2c9c2495dc.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libheck-2eb97a2c9c2495dc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/rustix-ad2048cb56f07405/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_service","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtower_service-19bdd4ab0f0e129a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtower_service-19bdd4ab0f0e129a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libutf8_iter-86c023bfa04b4165.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libutf8_iter-86c023bfa04b4165.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_lex@0.7.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_lex-0.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_lex","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_lex-0.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libclap_lex-967b0041e40ef49b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libclap_lex-967b0041e40ef49b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strsim@0.11.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strsim-0.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strsim-0.11.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libstrsim-d907793ae97783ff.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libstrsim-d907793ae97783ff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libscopeguard-4f9cd4d19a856790.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libscopeguard-4f9cd4d19a856790.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rawpointer@0.2.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rawpointer-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rawpointer","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rawpointer-0.2.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librawpointer-0c39f71908cc7795.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librawpointer-0c39f71908cc7795.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/typenum-27ae0eaf8fdcdd2e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsyn-c31bf0b988ae4945.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsyn-c31bf0b988ae4945.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-integer-0.1.46/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnum_integer-cbf2908f3e56873d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnum_integer-cbf2908f3e56873d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.17.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libring-dde9139d408de898.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libring-dde9139d408de898.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_deque-f5dfb20952b295bb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_deque-f5dfb20952b295bb.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","linked_libs":["static=ssl","static=crypto"],"linked_paths":["native=/home/rayan/Documents/git/qoa/target/debug/build/openssl-sys-7167b6bcdb6803e7/out/openssl-build/install/lib"],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_CAMELLIA\"","osslconf=\"OPENSSL_NO_COMP\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","osslconf=\"OPENSSL_NO_SEED\"","openssl","ossl340","ossl330","ossl320","ossl300","ossl101","ossl102","ossl102f","ossl102h","ossl110","ossl110f","ossl110g","ossl110h","ossl111","ossl111b","ossl111c","ossl111d"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/openssl-sys-7167b6bcdb6803e7/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/rustls-68f9c8942f2dd63c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.16","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.16/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["codec","default","io"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtokio_util-917f5d5a5c17f25d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtokio_util-917f5d5a5c17f25d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_chacha-4bcabc5ea284ae41.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_chacha-4bcabc5ea284ae41.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ciborium-io@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-io-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ciborium_io","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-io-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libciborium_io-575897dab3218508.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libciborium_io-575897dab3218508.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fallback"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/portable-atomic-be90e29aeaa48b2a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strength_reduce@0.2.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strength_reduce-0.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strength_reduce","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/strength_reduce-0.2.4/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libstrength_reduce-cd85eb5c75b8777f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libstrength_reduce-cd85eb5c75b8777f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libflate2-a88a0d30922b272e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libflate2-a88a0d30922b272e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/typenum-2cfe754e5043b1e5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"paste","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/paste-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpaste-e0c48706c0146156.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/lock_api-0.4.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblock_api-b0f171215b7703de.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblock_api-b0f171215b7703de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_chacha-d81dd8c7b48b97e5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_chacha-d81dd8c7b48b97e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#plotters-svg@0.3.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-svg-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"plotters_svg","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-svg-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libplotters_svg-78cbecff54b6faa7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libplotters_svg-78cbecff54b6faa7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/rustix-72f0daa4860d3b95/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","linked_libs":["static=ring-core","static=ring-test"],"linked_paths":["native=/home/rayan/Documents/git/qoa/target/debug/build/ring-d7178b8bcfd2e9e2/out"],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/ring-d7178b8bcfd2e9e2/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_builder@4.5.42","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.42/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_builder","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_builder-4.5.42/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","error-context","help","std","suggestions","usage"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libclap_builder-7a3e6b1bd27b95b7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libclap_builder-7a3e6b1bd27b95b7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","meta","nfa-pikevm","nfa-thompson","std","syntax"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libregex_automata-50c95ea980ec110e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libregex_automata-50c95ea980ec110e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matrixmultiply@0.3.10","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matrixmultiply-0.3.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matrixmultiply","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/matrixmultiply-0.3.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cgemm","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libmatrixmultiply-f747d95c126d022f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libmatrixmultiply-f747d95c126d022f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot_core-0.9.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libparking_lot_core-03339840113bc6ea.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libparking_lot_core-03339840113bc6ea.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#jemalloc-sys@0.5.4+5.3.0-patched","linked_libs":["static=jemalloc_pic"],"linked_paths":["native=/home/rayan/Documents/git/qoa/target/debug/build/jemalloc-sys-22f79987f07470e4/out/build/lib"],"cfgs":["prefixed"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/jemalloc-sys-22f79987f07470e4/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#wide@0.7.33","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wide-0.7.33/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"wide","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wide-0.7.33/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwide-13a7d9933cbeace3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwide-13a7d9933cbeace3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fdeflate@0.3.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fdeflate-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fdeflate","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fdeflate-0.3.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfdeflate-c0563ff8ce31734f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfdeflate-c0563ff8ce31734f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.10.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.10.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.10.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libitertools-729b0c8b9fc2a928.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libitertools-729b0c8b9fc2a928.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types-shared@0.1.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types_shared","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libforeign_types_shared-000797e9306f3fa4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libforeign_types_shared-000797e9306f3fa4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.9.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","ioctl","no_std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liblinux_raw_sys-2e071cd867939b13.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liblinux_raw_sys-2e071cd867939b13.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bitflags-1.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbitflags-44e529bbb592c929.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbitflags-44e529bbb592c929.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsame_file-e421e34c5eeb319c.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsame_file-e421e34c5eeb319c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbase64-20434d52ad75a09a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbase64-20434d52ad75a09a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/synstructure-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsynstructure-9ecb50f90bf515d5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsynstructure-9ecb50f90bf515d5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libserde_derive-83ef8277ea5a8333.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.11.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-derive-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerovec_derive-46a247c33f7f8dde.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libdisplaydoc-bb2100dd8a3b28b6.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sct@0.7.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sct-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sct","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sct-0.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsct-203488356478f861.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsct-203488356478f861.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.101.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.101.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.101.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki-50e4428bf26b9c20.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki-50e4428bf26b9c20.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librayon_core-29b270907e6c88bf.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librayon_core-29b270907e6c88bf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.3.27","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.3.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.3.27/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libh2-cf723b9b37f49711.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libh2-cf723b9b37f49711.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ciborium-ll@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-ll-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ciborium_ll","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-ll-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libciborium_ll-af7d9caa416b4b69.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libciborium_ll-af7d9caa416b4b69.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/portable-atomic-95eb60b8cde57d6e/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_derive@4.5.41","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_derive-4.5.41/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"clap_derive","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap_derive-4.5.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libclap_derive-2856d88df4c0ed66.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#transpose@0.2.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/transpose-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"transpose","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/transpose-0.2.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtranspose-d7bfbc241b3599e5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtranspose-d7bfbc241b3599e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#primal-check@0.3.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/primal-check-0.3.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"primal_check","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/primal-check-0.3.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libprimal_check-d8b9a7523f00ac1b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libprimal_check-d8b9a7523f00ac1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand-de43c1113df44a8e.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand-de43c1113df44a8e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cast@0.3.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cast-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cast","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cast-0.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcast-f8e1f08022b0f40f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcast-f8e1f08022b0f40f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","vendored"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/openssl-4c0d613146b450ee/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.7.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/untrusted-0.7.1/src/untrusted.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libuntrusted-08a0ec4010df28d6.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libuntrusted-08a0ec4010df28d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-core@0.4.12","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-core-0.4.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzune_core-d4ee57e9aa71ccd3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzune_core-d4ee57e9aa71ccd3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.5.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/spin-0.5.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libspin-2c3569d5d3ef1f74.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libspin-2c3569d5d3ef1f74.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.2.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-width-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_width","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unicode-width-0.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cjk","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libunicode_width-bdd4f7c2ba30c4d2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libunicode_width-bdd4f7c2ba30c4d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand-332b6e333a8fd0f0.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand-332b6e333a8fd0f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#plotters@0.3.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"plotters","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/plotters-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["area_series","line_series","plotters-svg","svg_backend"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libplotters-3c7fd958a5d571b0.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libplotters-3c7fd958a5d571b0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtypenum-21ef80eeab43e115.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtypenum-21ef80eeab43e115.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jemalloc-sys@0.5.4+5.3.0-patched","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemalloc-sys-0.5.4+5.3.0-patched/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jemalloc_sys","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemalloc-sys-0.5.4+5.3.0-patched/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["background_threads_runtime_support"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libjemalloc_sys-632231f6b28c7fb3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libjemalloc_sys-632231f6b28c7fb3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@1.0.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pemfile-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pemfile","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-pemfile-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librustls_pemfile-3e72ebb380c77392.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librustls_pemfile-3e72ebb380c77392.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nalgebra-macros@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nalgebra-macros-0.2.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"nalgebra_macros","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nalgebra-macros-0.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnalgebra_macros-f45e3253514d1d70.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-macros@0.1.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-macros-0.1.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"openssl_macros","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-macros-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl_macros-bb8100e693e697d5.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@1.0.8","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librustix-3fced353d83a474c.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librustix-3fced353d83a474c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwalkdir-47305779dc3a4fbc.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwalkdir-47305779dc3a4fbc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types@0.3.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libforeign_types-809fa80d490e5a3b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libforeign_types-809fa80d490e5a3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_sys","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["openssl-src","vendored"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl_sys-9a26ba3d4510532f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl_sys-9a26ba3d4510532f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#png@0.17.16","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/png-0.17.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"png","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/png-0.17.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpng-fd5e18439386474d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpng-fd5e18439386474d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-derive-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerofrom_derive-53695c7d468a6948.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.8.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-derive-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libyoke_derive-7ca6b44df7163286.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","serde_derive","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libserde-25507619bfa28072.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libserde-25507619bfa28072.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.21.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-0.21.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librustls-278b81bc028695ca.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librustls-278b81bc028695ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librayon-26320237260fd019.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librayon-26320237260fd019.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@0.14.32","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-0.14.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-0.14.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","h2","http1","http2","runtime","socket2","tcp"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhyper-8d4f4da7b9ea9c68.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhyper-8d4f4da7b9ea9c68.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","linked_libs":[],"linked_paths":[],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_CAMELLIA\"","osslconf=\"OPENSSL_NO_COMP\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","osslconf=\"OPENSSL_NO_SEED\"","ossl101","ossl102","ossl110","ossl110g","ossl110h","ossl111","ossl111d","ossl300","ossl310","ossl320","ossl330"],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/openssl-047e6aec9a946766/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zune-jpeg@0.4.20","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-jpeg-0.4.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zune_jpeg","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zune-jpeg-0.4.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","neon","std","x86"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzune_jpeg-35370bffddcddbc5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzune_jpeg-35370bffddcddbc5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.16.20","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libring-d0a202d030a7a7a4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libring-d0a202d030a7a7a4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#console@0.16.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/console-0.16.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"console","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/console-0.16.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi-parsing","std","unicode-width"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libconsole-921b6cb200f65b68.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libconsole-921b6cb200f65b68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_distr@0.4.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_distr-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_distr","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_distr-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_distr-fc783ff0e3b69818.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_distr-fc783ff0e3b69818.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#criterion-plot@0.5.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/criterion-plot-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"criterion_plot","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/criterion-plot-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcriterion_plot-71fe4f81dff0affd.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcriterion_plot-71fe4f81dff0affd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"portable_atomic","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/portable-atomic-1.11.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fallback"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libportable_atomic-944af656a874a511.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libportable_atomic-944af656a874a511.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap@4.5.42","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-4.5.42/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/clap-4.5.42/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","default","derive","error-context","help","std","suggestions","usage"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libclap-6902d39fcf38fa41.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libclap-6902d39fcf38fa41.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-rational-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_rational","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-rational-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnum_rational-520c9a3c89320d76.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnum_rational-520c9a3c89320d76.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libregex-a3eaf716e7503321.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libregex-a3eaf716e7503321.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.17.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num_cpus-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_cpus","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num_cpus-1.17.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnum_cpus-e06d384cad41f626.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnum_cpus-e06d384cad41f626.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is-terminal@0.4.16","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is-terminal-0.4.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/is-terminal-0.4.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libis_terminal-9e273dad374704e8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libis_terminal-9e273dad374704e8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#os_pipe@1.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/os_pipe-1.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"os_pipe","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/os_pipe-1.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libos_pipe-ee3f0fe4e65971f5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libos_pipe-ee3f0fe4e65971f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shared_child@1.1.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shared_child","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_child-1.1.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libshared_child-90ab17b6bd7b4a08.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libshared_child-90ab17b6bd7b4a08.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/rayan/Documents/git/qoa/build.rs","edition":"2024","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","pure-rust-math"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/build/qoa-5a4acbd2d983df79/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/encoding_rs-0.8.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/encoding_rs-0.8.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libencoding_rs-d71c78319814e535.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libencoding_rs-d71c78319814e535.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#env_filter@0.1.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_filter-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"env_filter","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_filter-0.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libenv_filter-2fb4e505cf872133.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libenv_filter-2fb4e505cf872133.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libmime-f3f00be878018b64.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libmime-f3f00be878018b64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/fastrand-2.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libfastrand-57dd73f2f0a5d247.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libfastrand-57dd73f2f0a5d247.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unit-prefix@0.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unit-prefix-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unit_prefix","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/unit-prefix-0.5.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libunit_prefix-79d92f1cec8496fb.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libunit_prefix-79d92f1cec8496fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder-lite@0.1.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-lite-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder_lite","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/byteorder-lite-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbyteorder_lite-65687595c217cef5.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbyteorder_lite-65687595c217cef5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ipnet@2.11.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ipnet-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ipnet","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ipnet-2.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libipnet-e1265493275c7151.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libipnet-e1265493275c7151.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@0.1.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sync_wrapper-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsync_wrapper-1c10b7d4cf1e4e14.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsync_wrapper-1c10b7d4cf1e4e14.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#oorandom@11.1.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/oorandom-11.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"oorandom","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/oorandom-11.1.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liboorandom-84db20f49fdf58ad.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liboorandom-84db20f49fdf58ad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.14.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.14.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhashbrown-1ea604125994c99f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhashbrown-1ea604125994c99f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anes@0.1.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anes-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anes","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anes-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libanes-cd422e5a21051db1.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libanes-cd422e5a21051db1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerofrom-a9c3074e00be418d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzerofrom-a9c3074e00be418d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-complex@0.4.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-complex-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_complex","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-complex-0.4.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnum_complex-65b299b8e081a369.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnum_complex-65b299b8e081a369.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.142","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.142/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libserde_json-f154f02b693a1cc6.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libserde_json-f154f02b693a1cc6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.24.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.24.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-rustls-0.24.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","tls12"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtokio_rustls-1c46619606b7c46a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtokio_rustls-1c46619606b7c46a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_urlencoded-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_urlencoded","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_urlencoded-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libserde_urlencoded-5c7f1dd61cf96a66.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libserde_urlencoded-5c7f1dd61cf96a66.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ciborium@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ciborium","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ciborium-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libciborium-0afd63cab219d2ac.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libciborium-0afd63cab219d2ac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.25.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.25.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webpki-roots-0.25.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki_roots-6560a83d6c4c9fd1.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki_roots-6560a83d6c4c9fd1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shared_thread@0.2.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_thread-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shared_thread","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/shared_thread-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libshared_thread-cae3444f0b10cea4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libshared_thread-cae3444f0b10cea4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#env_logger@0.11.8","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.11.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"env_logger","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/env_logger-0.11.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libenv_logger-02e80398440340d9.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libenv_logger-02e80398440340d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#image@0.25.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-0.25.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"image","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/image-0.25.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["jpeg","png"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libimage-5be03cb80aad5faa.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libimage-5be03cb80aad5faa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tempfile@3.20.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tempfile-3.20.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tempfile","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tempfile-3.20.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtempfile-24a723b4f82721d1.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtempfile-24a723b4f82721d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","vendored"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl-f09415c4786fef75.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libopenssl-f09415c4786fef75.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","linked_libs":["static=asm_math","static=asm_math","m","static=svml_compat"],"linked_paths":["native=/home/rayan/Documents/git/qoa/target/debug/build/qoa-d6b2e422464647f4/out","native=/home/rayan/Documents/git/qoa/target/debug/build/qoa-d6b2e422464647f4/out"],"cfgs":["feature=\"rustls-tls\""],"env":[],"out_dir":"/home/rayan/Documents/git/qoa/target/debug/build/qoa-d6b2e422464647f4/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.100.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.100.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustls-webpki-0.100.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki-ce3592c2945a1355.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libwebpki-ce3592c2945a1355.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bincode@1.3.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bincode","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbincode-95b38b4ce0aaadce.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbincode-95b38b4ce0aaadce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dashmap@5.5.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dashmap-5.5.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dashmap","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/dashmap-5.5.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libdashmap-c0634db15a6ae0f2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libdashmap-c0634db15a6ae0f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#core_affinity@0.8.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/core_affinity-0.8.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"core_affinity","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/core_affinity-0.8.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcore_affinity-cf3c60971ca73e20.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcore_affinity-cf3c60971ca73e20.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indicatif@0.18.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indicatif-0.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indicatif","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indicatif-0.18.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rayon","unicode-width"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libindicatif-9e2b296d50f72c3b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libindicatif-9e2b296d50f72c3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jemallocator@0.5.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemallocator-0.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jemallocator","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/jemallocator-0.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["background_threads_runtime_support","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libjemallocator-0664eed5092fcd84.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libjemallocator-0664eed5092fcd84.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_distr@0.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_distr-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_distr","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand_distr-0.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librand_distr-fdfebe8cbcc73d4b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librand_distr-fdfebe8cbcc73d4b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/parking_lot-0.12.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libparking_lot-80355a09e4c9e83a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libparking_lot-80355a09e4c9e83a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-channel@0.5.15","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-channel-0.5.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_channel","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/crossbeam-channel-0.5.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_channel-180861c093444432.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcrossbeam_channel-180861c093444432.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memmap2@0.9.7","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memmap2-0.9.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memmap2","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/memmap2-0.9.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libmemmap2-3e40969ba138c968.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libmemmap2-3e40969ba138c968.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.14.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.14.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/itertools-0.14.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libitertools-8b6ce5e52117855d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libitertools-8b6ce5e52117855d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bumpalo@3.19.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bumpalo-3.19.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bumpalo","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bumpalo-3.19.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["collections","default"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libbumpalo-2ea76150f2ea4592.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libbumpalo-2ea76150f2ea4592.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hound@3.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hound-3.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hound","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hound-3.5.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhound-782e00befb61dcd3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhound-782e00befb61dcd3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libyoke-2f6754989a8eb6e1.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libyoke-2f6754989a8eb6e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#approx@0.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/approx-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"approx","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/approx-0.5.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","num-complex","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libapprox-c9cfd97e8b375fad.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libapprox-c9cfd97e8b375fad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustfft@6.4.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustfft-6.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustfft","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustfft-6.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["avx","default","neon","sse"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librustfft-9ff582205a0f3eb0.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librustfft-9ff582205a0f3eb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinytemplate@1.2.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinytemplate-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinytemplate","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinytemplate-1.2.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtinytemplate-2f469145116d073b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtinytemplate-2f469145116d073b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-rustls@0.24.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-rustls-0.24.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_rustls","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-rustls-0.24.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libhyper_rustls-b2fd7d404c1c4456.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libhyper_rustls-b2fd7d404c1c4456.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ndarray@0.16.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndarray-0.16.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ndarray","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ndarray-0.16.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rayon","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libndarray-f880254e02e9d30a.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libndarray-f880254e02e9d30a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#duct@1.1.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"duct","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/duct-1.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libduct-6874c979e28007f2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libduct-6874c979e28007f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerovec-0.11.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerovec-0d558e3b09938393.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzerovec-0d558e3b09938393.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libzerotrie-18dccc8cd9637b0f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libzerotrie-18dccc8cd9637b0f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simba@0.8.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simba-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simba","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/simba-0.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","wide"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libsimba-3f0575daac0b42a2.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libsimba-3f0575daac0b42a2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#criterion@0.5.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/criterion-0.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"criterion","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/criterion-0.5.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cargo_bench_support","default","plotters","rayon"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libcriterion-1d86f26dc21cac74.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libcriterion-1d86f26dc21cac74.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#realfft@2.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/realfft-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"realfft","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/realfft-2.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/librealfft-038a4cc437682116.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/librealfft-038a4cc437682116.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libtinystr-5a60103b992d83a7.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libtinystr-5a60103b992d83a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libpotential_utf-b9dfd4cb805c21a8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libpotential_utf-b9dfd4cb805c21a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nalgebra@0.32.6","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nalgebra-0.32.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nalgebra","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nalgebra-0.32.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","macros","matrixmultiply","nalgebra-macros","rand","rand-no-std","rand-package","rand_distr","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libnalgebra-a03c0d58f42320b8.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libnalgebra-a03c0d58f42320b8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_locale_core-000f7871dcf01ca1.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_locale_core-000f7871dcf01ca1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_collections-5da200fe3b9cf78b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_collections-5da200fe3b9cf78b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_provider-6e9ee9f248c6fad4.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_provider-6e9ee9f248c6fad4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_properties-a279aa73d6dc0b5f.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_properties-a279aa73d6dc0b5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libicu_normalizer-ad1fa2592aebada9.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libicu_normalizer-ad1fa2592aebada9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libidna_adapter-c77938966abe4d4d.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libidna_adapter-c77938966abe4d4d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.0.3","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/idna-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libidna-861f8254e9a3b23b.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libidna-861f8254e9a3b23b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.4","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/url-2.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/liburl-0a13316fdbb47ef3.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/liburl-0a13316fdbb47ef3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reqwest@0.11.27","manifest_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.11.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reqwest","src_path":"/home/rayan/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.11.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls","__tls","hyper-rustls","json","rustls","rustls-tls","rustls-tls-webpki-roots","serde_json","tokio-rustls","webpki-roots"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/deps/libreqwest-65bc8919183ea7d9.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libreqwest-65bc8919183ea7d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/lib.rs","edition":"2024","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","pure-rust-math"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/libqoa.rlib","/home/rayan/Documents/git/qoa/target/debug/deps/libqoa-6bb0f22b35bd44e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_avx512` is unsafe and requires unsafe block\n   --> src/visualizer.rs:112:17\n    |\n112 |                 mix_stereo_to_mono_avx512(samples, output)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:110:9\n    |\n110 |         pub unsafe fn mix_stereo_to_mono_f32(samples: &[f32], output: &mut Vec<f32>) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":4065,"byte_start":3989,"column_end":85,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":9,"text":"        pub unsafe fn mix_stereo_to_mono_f32(samples: &[f32], output: &mut Vec<f32>) {"}]}]},{"children":[],"code":null,"level":"note","message":"`#[warn(unsafe_op_in_unsafe_fn)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":4066,"byte_start":4066,"column_end":86,"column_start":86,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":110,"line_start":110,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":86,"highlight_start":86,"text":"        pub unsafe fn mix_stereo_to_mono_f32(samples: &[f32], output: &mut Vec<f32>) {"}]},{"byte_end":4531,"byte_start":4531,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":120,"line_start":120,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_avx512` is unsafe and requires unsafe block","spans":[{"byte_end":4179,"byte_start":4137,"column_end":59,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":112,"line_start":112,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":17,"text":"                mix_stereo_to_mono_avx512(samples, output)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_avx2` is unsafe and requires unsafe block\n   --> src/visualizer.rs:114:17\n    |\n114 |                 mix_stereo_to_mono_avx2(samples, output)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_avx2` is unsafe and requires unsafe block","spans":[{"byte_end":4293,"byte_start":4253,"column_end":57,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":17,"text":"                mix_stereo_to_mono_avx2(samples, output)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_sse` is unsafe and requires unsafe block\n   --> src/visualizer.rs:116:17\n    |\n116 |                 mix_stereo_to_mono_sse(samples, output)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::mix_stereo_to_mono_sse` is unsafe and requires unsafe block","spans":[{"byte_end":4406,"byte_start":4367,"column_end":56,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":116,"line_start":116,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":17,"text":"                mix_stereo_to_mono_sse(samples, output)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::calculate_spectral_centroid_avx2` is unsafe and requires unsafe block\n   --> src/visualizer.rs:128:13\n    |\n128 |             calculate_spectral_centroid_avx2(spectrum_mags, bin_width)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:124:9\n    |\n124 | /         pub unsafe fn calculate_spectral_centroid_f64( // Marked as unsafe fn\n125 | |             spectrum_mags: &[f64],\n126 | |             bin_width: f64,\n127 | |         ) -> (f64, f64) {\n    | |_______________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":4873,"byte_start":4717,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":127,"line_start":124,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":9,"text":"        pub unsafe fn calculate_spectral_centroid_f64( // Marked as unsafe fn"},{"highlight_end":35,"highlight_start":1,"text":"            spectrum_mags: &[f64],"},{"highlight_end":28,"highlight_start":1,"text":"            bin_width: f64,"},{"highlight_end":24,"highlight_start":1,"text":"        ) -> (f64, f64) {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":4874,"byte_start":4874,"column_end":25,"column_start":25,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":127,"line_start":127,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":25,"text":"        ) -> (f64, f64) {"}]},{"byte_end":4956,"byte_start":4956,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":129,"line_start":129,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::calculate_spectral_centroid_avx2` is unsafe and requires unsafe block","spans":[{"byte_end":4946,"byte_start":4888,"column_end":71,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":128,"line_start":128,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":13,"text":"            calculate_spectral_centroid_avx2(spectrum_mags, bin_width)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:140:28\n    |\n140 |                 let data = _mm512_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:133:9\n    |\n133 |         unsafe fn sum_squares_avx512(samples: &AlignedBuffer<f32>) -> f64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":5154,"byte_start":5089,"column_end":74,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":74,"highlight_start":9,"text":"        unsafe fn sum_squares_avx512(samples: &AlignedBuffer<f32>) -> f64 {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":5155,"byte_start":5155,"column_end":75,"column_start":75,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":133,"line_start":133,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":75,"highlight_start":75,"text":"        unsafe fn sum_squares_avx512(samples: &AlignedBuffer<f32>) -> f64 {"}]},{"byte_end":5828,"byte_start":5828,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":147,"line_start":147,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":5517,"byte_start":5486,"column_end":59,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":28,"text":"                let data = _mm512_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:158:28\n    |\n158 |                 let data = _mm256_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:151:9\n    |\n151 |         unsafe fn sum_squares_avx2(samples: &AlignedBuffer<f32>) -> f64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":6035,"byte_start":5972,"column_end":72,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":9,"text":"        unsafe fn sum_squares_avx2(samples: &AlignedBuffer<f32>) -> f64 {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":6036,"byte_start":6036,"column_end":73,"column_start":73,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":151,"line_start":151,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":73,"highlight_start":73,"text":"        unsafe fn sum_squares_avx2(samples: &AlignedBuffer<f32>) -> f64 {"}]},{"byte_end":6715,"byte_start":6715,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":165,"line_start":165,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":6397,"byte_start":6366,"column_end":59,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":158,"line_start":158,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":28,"text":"                let data = _mm256_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:162:33\n    |\n162 |             let mut total_sum = horizontal_sum_ps(sum_vec) as f64;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_ps` is unsafe and requires unsafe block","spans":[{"byte_end":6589,"byte_start":6563,"column_end":59,"column_start":33,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":33,"text":"            let mut total_sum = horizontal_sum_ps(sum_vec) as f64;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:176:28\n    |\n176 |                 let data = _mm_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:169:9\n    |\n169 |         unsafe fn sum_squares_sse(samples: &AlignedBuffer<f32>) -> f64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":6903,"byte_start":6841,"column_end":71,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":9,"text":"        unsafe fn sum_squares_sse(samples: &AlignedBuffer<f32>) -> f64 {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":6904,"byte_start":6904,"column_end":72,"column_start":72,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":169,"line_start":169,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":72,"highlight_start":72,"text":"        unsafe fn sum_squares_sse(samples: &AlignedBuffer<f32>) -> f64 {"}]},{"byte_end":7847,"byte_start":7847,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":189,"line_start":189,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":7253,"byte_start":7225,"column_end":56,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":176,"line_start":176,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":28,"text":"                let data = _mm_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:201:28\n    |\n201 |                 let data = _mm512_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:193:9\n    |\n193 |         unsafe fn mix_stereo_to_mono_avx512(samples: &[f32], output: &mut Vec<f32>) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":8046,"byte_start":7971,"column_end":84,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":193,"line_start":193,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":9,"text":"        unsafe fn mix_stereo_to_mono_avx512(samples: &[f32], output: &mut Vec<f32>) {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":8047,"byte_start":8047,"column_end":85,"column_start":85,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":193,"line_start":193,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":85,"highlight_start":85,"text":"        unsafe fn mix_stereo_to_mono_avx512(samples: &[f32], output: &mut Vec<f32>) {"}]},{"byte_end":8968,"byte_start":8968,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":212,"line_start":212,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":8445,"byte_start":8414,"column_end":59,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":28,"text":"                let data = _mm512_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_storeu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:206:17\n    |\n206 |                 _mm512_storeu_ps(buffer.as_mut_ptr(), avgs);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_storeu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":8770,"byte_start":8727,"column_end":60,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":206,"line_start":206,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":17,"text":"                _mm512_storeu_ps(buffer.as_mut_ptr(), avgs);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:223:28\n    |\n223 |                 let left = _mm256_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:216:9\n    |\n216 |         unsafe fn mix_stereo_to_mono_avx2(samples: &[f32], output: &mut Vec<f32>) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":9160,"byte_start":9087,"column_end":82,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":82,"highlight_start":9,"text":"        unsafe fn mix_stereo_to_mono_avx2(samples: &[f32], output: &mut Vec<f32>) {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":9161,"byte_start":9161,"column_end":83,"column_start":83,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":83,"highlight_start":83,"text":"        unsafe fn mix_stereo_to_mono_avx2(samples: &[f32], output: &mut Vec<f32>) {"}]},{"byte_end":9950,"byte_start":9950,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":233,"line_start":233,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":9509,"byte_start":9478,"column_end":59,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":28,"text":"                let left = _mm256_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:224:29\n    |\n224 |                 let right = _mm256_loadu_ps(chunk.as_ptr().add(8));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":9577,"byte_start":9539,"column_end":67,"column_start":29,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":29,"text":"                let right = _mm256_loadu_ps(chunk.as_ptr().add(8));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block\n   --> src/visualizer.rs:224:45\n    |\n224 |                 let right = _mm256_loadu_ps(chunk.as_ptr().add(8));\n    |                                             ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block","spans":[{"byte_end":9576,"byte_start":9555,"column_end":66,"column_start":45,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":224,"line_start":224,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":45,"text":"                let right = _mm256_loadu_ps(chunk.as_ptr().add(8));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:227:17\n    |\n227 |                 _mm256_storeu_ps(buffer.as_mut_ptr(), avgs);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":9752,"byte_start":9709,"column_end":60,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":227,"line_start":227,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":17,"text":"                _mm256_storeu_ps(buffer.as_mut_ptr(), avgs);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:244:28\n    |\n244 |                 let left = _mm_loadu_ps(chunk.as_ptr());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:237:9\n    |\n237 |         unsafe fn mix_stereo_to_mono_sse(samples: &[f32], output: &mut Vec<f32>) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":10141,"byte_start":10069,"column_end":81,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":237,"line_start":237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":81,"highlight_start":9,"text":"        unsafe fn mix_stereo_to_mono_sse(samples: &[f32], output: &mut Vec<f32>) {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":10142,"byte_start":10142,"column_end":82,"column_start":82,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":237,"line_start":237,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":82,"highlight_start":82,"text":"        unsafe fn mix_stereo_to_mono_sse(samples: &[f32], output: &mut Vec<f32>) {"}]},{"byte_end":10912,"byte_start":10912,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":254,"line_start":254,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":10483,"byte_start":10455,"column_end":56,"column_start":28,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":28,"text":"                let left = _mm_loadu_ps(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:245:29\n    |\n245 |                 let right = _mm_loadu_ps(chunk.as_ptr().add(4));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":10548,"byte_start":10513,"column_end":64,"column_start":29,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":245,"line_start":245,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":29,"text":"                let right = _mm_loadu_ps(chunk.as_ptr().add(4));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block\n   --> src/visualizer.rs:245:42\n    |\n245 |                 let right = _mm_loadu_ps(chunk.as_ptr().add(4));\n    |                                          ^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block","spans":[{"byte_end":10547,"byte_start":10526,"column_end":63,"column_start":42,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":245,"line_start":245,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":42,"text":"                let right = _mm_loadu_ps(chunk.as_ptr().add(4));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:248:17\n    |\n248 |                 _mm_storeu_ps(buffer.as_mut_ptr(), avgs);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":10714,"byte_start":10674,"column_end":57,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":248,"line_start":248,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":17,"text":"                _mm_storeu_ps(buffer.as_mut_ptr(), avgs);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:272:34\n    |\n272 |                 let magnitudes = _mm256_loadu_pd(chunk.as_ptr());\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:258:9\n    |\n258 | /         unsafe fn calculate_spectral_centroid_avx2(\n259 | |             spectrum_mags: &[f64],\n260 | |             bin_width: f64,\n261 | |         ) -> (f64, f64) {\n    | |_______________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":11176,"byte_start":11046,"column_end":24,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":261,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":9,"text":"        unsafe fn calculate_spectral_centroid_avx2("},{"highlight_end":35,"highlight_start":1,"text":"            spectrum_mags: &[f64],"},{"highlight_end":28,"highlight_start":1,"text":"            bin_width: f64,"},{"highlight_end":24,"highlight_start":1,"text":"        ) -> (f64, f64) {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":11177,"byte_start":11177,"column_end":25,"column_start":25,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":261,"line_start":261,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":25,"highlight_start":25,"text":"        ) -> (f64, f64) {"}]},{"byte_end":12821,"byte_start":12821,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":296,"line_start":296,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":11630,"byte_start":11599,"column_end":65,"column_start":34,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":272,"line_start":272,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":34,"text":"                let magnitudes = _mm256_loadu_pd(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:284:47\n    |\n284 |             let mut total_sum_weighted_freq = horizontal_sum_pd(sum_weighted_freq_vec);\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block","spans":[{"byte_end":12289,"byte_start":12249,"column_end":87,"column_start":47,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":284,"line_start":284,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":47,"text":"            let mut total_sum_weighted_freq = horizontal_sum_pd(sum_weighted_freq_vec);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:285:44\n    |\n285 |             let mut total_sum_magnitudes = horizontal_sum_pd(sum_magnitudes_vec);\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block","spans":[{"byte_end":12371,"byte_start":12334,"column_end":81,"column_start":44,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":285,"line_start":285,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":81,"highlight_start":44,"text":"            let mut total_sum_magnitudes = horizontal_sum_pd(sum_magnitudes_vec);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:329:31\n    |\n329 |                 let mag_vec = _mm256_loadu_pd(chunk.as_ptr());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:300:9\n    |\n300 | /         pub unsafe fn calculate_band_energy_simd(\n301 | |             spectrum_mags: &[f64],\n302 | |             sample_rate: u32,\n303 | |             low_hz: f64,\n304 | |             high_hz: f64,\n305 | |         ) -> f64 {\n    | |________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":13139,"byte_start":12965,"column_end":17,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":305,"line_start":300,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":9,"text":"        pub unsafe fn calculate_band_energy_simd("},{"highlight_end":35,"highlight_start":1,"text":"            spectrum_mags: &[f64],"},{"highlight_end":30,"highlight_start":1,"text":"            sample_rate: u32,"},{"highlight_end":25,"highlight_start":1,"text":"            low_hz: f64,"},{"highlight_end":26,"highlight_start":1,"text":"            high_hz: f64,"},{"highlight_end":17,"highlight_start":1,"text":"        ) -> f64 {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":13140,"byte_start":13140,"column_end":18,"column_start":18,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":305,"line_start":305,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":18,"text":"        ) -> f64 {"}]},{"byte_end":14391,"byte_start":14391,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":340,"line_start":340,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":14061,"byte_start":14030,"column_end":62,"column_start":31,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":329,"line_start":329,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":31,"text":"                let mag_vec = _mm256_loadu_pd(chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:334:26\n    |\n334 |             let result = horizontal_sum_pd(sum_vec);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `visualizer::audio_simd::platform_impl::horizontal_sum_pd` is unsafe and requires unsafe block","spans":[{"byte_end":14229,"byte_start":14203,"column_end":52,"column_start":26,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":334,"line_start":334,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":26,"text":"            let result = horizontal_sum_pd(sum_vec);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:790:29\n    |\n790 |                 let h_vec = _mm256_loadu_pd(h_chunk.as_ptr());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:773:9\n    |\n773 |         pub unsafe fn hsv_to_rgb_batch_simd(h_batch: &[f64], s_batch: &[f64], v_batch: &[f64]) -> Vec<(f64, f64, f64)> {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":33479,"byte_start":33369,"column_end":119,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":773,"line_start":773,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":9,"text":"        pub unsafe fn hsv_to_rgb_batch_simd(h_batch: &[f64], s_batch: &[f64], v_batch: &[f64]) -> Vec<(f64, f64, f64)> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":33480,"byte_start":33480,"column_end":120,"column_start":120,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":773,"line_start":773,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":120,"highlight_start":120,"text":"        pub unsafe fn hsv_to_rgb_batch_simd(h_batch: &[f64], s_batch: &[f64], v_batch: &[f64]) -> Vec<(f64, f64, f64)> {"}]},{"byte_end":38480,"byte_start":38480,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":888,"line_start":888,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":34284,"byte_start":34251,"column_end":62,"column_start":29,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":790,"line_start":790,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":29,"text":"                let h_vec = _mm256_loadu_pd(h_chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:791:29\n    |\n791 |                 let s_vec = _mm256_loadu_pd(s_chunk.as_ptr());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":34347,"byte_start":34314,"column_end":62,"column_start":29,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":791,"line_start":791,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":29,"text":"                let s_vec = _mm256_loadu_pd(s_chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:792:29\n    |\n792 |                 let v_vec = _mm256_loadu_pd(v_chunk.as_ptr());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":34410,"byte_start":34377,"column_end":62,"column_start":29,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":792,"line_start":792,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":29,"text":"                let v_vec = _mm256_loadu_pd(v_chunk.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:873:17\n    |\n873 |                 _mm256_storeu_pd(r_arr.as_mut_ptr(), final_r);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":37990,"byte_start":37945,"column_end":62,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":873,"line_start":873,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":17,"text":"                _mm256_storeu_pd(r_arr.as_mut_ptr(), final_r);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:874:17\n    |\n874 |                 _mm256_storeu_pd(g_arr.as_mut_ptr(), final_g);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":38053,"byte_start":38008,"column_end":62,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":874,"line_start":874,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":17,"text":"                _mm256_storeu_pd(g_arr.as_mut_ptr(), final_g);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n   --> src/visualizer.rs:875:17\n    |\n875 |                 _mm256_storeu_pd(b_arr.as_mut_ptr(), final_b);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":38116,"byte_start":38071,"column_end":62,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":875,"line_start":875,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":17,"text":"                _mm256_storeu_pd(b_arr.as_mut_ptr(), final_b);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused variable: `g_u8_hi`\n   --> src/visualizer.rs:969:21\n    |\n969 |                 let g_u8_hi = _mm_cvtepi16_epi8(g_i16_hi);\n    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_g_u8_hi`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_variables)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":42782,"byte_start":42775,"column_end":28,"column_start":21,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":969,"line_start":969,"suggested_replacement":"_g_u8_hi","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":28,"highlight_start":21,"text":"                let g_u8_hi = _mm_cvtepi16_epi8(g_i16_hi);"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `g_u8_hi`","spans":[{"byte_end":42782,"byte_start":42775,"column_end":28,"column_start":21,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":969,"line_start":969,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":21,"text":"                let g_u8_hi = _mm_cvtepi16_epi8(g_i16_hi);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:926:30\n    |\n926 |                 let r1_vec = _mm512_loadu_ps(r1_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n   --> src/visualizer.rs:893:9\n    |\n893 |         pub unsafe fn blend_pixels_batch_avx512(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":38849,"byte_start":38740,"column_end":118,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":893,"line_start":893,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":118,"highlight_start":9,"text":"        pub unsafe fn blend_pixels_batch_avx512(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":38850,"byte_start":38850,"column_end":119,"column_start":119,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":893,"line_start":893,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":119,"highlight_start":119,"text":"        pub unsafe fn blend_pixels_batch_avx512(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {"}]},{"byte_end":44156,"byte_start":44156,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":999,"line_start":999,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40281,"byte_start":40251,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":926,"line_start":926,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let r1_vec = _mm512_loadu_ps(r1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:927:30\n    |\n927 |                 let g1_vec = _mm512_loadu_ps(g1_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40342,"byte_start":40312,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":927,"line_start":927,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let g1_vec = _mm512_loadu_ps(g1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:928:30\n    |\n928 |                 let b1_vec = _mm512_loadu_ps(b1_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40403,"byte_start":40373,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":928,"line_start":928,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let b1_vec = _mm512_loadu_ps(b1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:930:30\n    |\n930 |                 let r2_vec = _mm512_loadu_ps(r2_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40465,"byte_start":40435,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":930,"line_start":930,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let r2_vec = _mm512_loadu_ps(r2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:931:30\n    |\n931 |                 let g2_vec = _mm512_loadu_ps(g2_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40526,"byte_start":40496,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":931,"line_start":931,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let g2_vec = _mm512_loadu_ps(g2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block\n   --> src/visualizer.rs:932:30\n    |\n932 |                 let b2_vec = _mm512_loadu_ps(b2_f.as_ptr());\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm512_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":40587,"byte_start":40557,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":932,"line_start":932,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let b2_vec = _mm512_loadu_ps(b2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block\n   --> src/visualizer.rs:978:17\n    |\n978 |                 _mm_storeu_si128(r_arr.as_mut_ptr() as *mut __m128i, r_u8_lo);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block","spans":[{"byte_end":43218,"byte_start":43157,"column_end":78,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":978,"line_start":978,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":17,"text":"                _mm_storeu_si128(r_arr.as_mut_ptr() as *mut __m128i, r_u8_lo);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block\n   --> src/visualizer.rs:979:17\n    |\n979 |                 _mm_storeu_si128(r_arr.as_mut_ptr().add(8) as *mut __m128i, r_u8_hi);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block","spans":[{"byte_end":43304,"byte_start":43236,"column_end":85,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":979,"line_start":979,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":17,"text":"                _mm_storeu_si128(r_arr.as_mut_ptr().add(8) as *mut __m128i, r_u8_hi);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block\n   --> src/visualizer.rs:979:34\n    |\n979 |                 _mm_storeu_si128(r_arr.as_mut_ptr().add(8) as *mut __m128i, r_u8_hi);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block","spans":[{"byte_end":43278,"byte_start":43253,"column_end":59,"column_start":34,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":979,"line_start":979,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":34,"text":"                _mm_storeu_si128(r_arr.as_mut_ptr().add(8) as *mut __m128i, r_u8_hi);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block\n   --> src/visualizer.rs:980:17\n    |\n980 |                 _mm_storeu_si128(g_arr.as_mut_ptr() as *mut __m128i, g_u8_lo);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block","spans":[{"byte_end":43383,"byte_start":43322,"column_end":78,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":980,"line_start":980,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":17,"text":"                _mm_storeu_si128(g_arr.as_mut_ptr() as *mut __m128i, g_u8_lo);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block\n   --> src/visualizer.rs:981:17\n    |\n981 |                 _mm_storeu_si128(b_arr.as_mut_ptr() as *mut __m128i, b_u8_lo);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block","spans":[{"byte_end":43462,"byte_start":43401,"column_end":78,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":981,"line_start":981,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":17,"text":"                _mm_storeu_si128(b_arr.as_mut_ptr() as *mut __m128i, b_u8_lo);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block\n   --> src/visualizer.rs:982:17\n    |\n982 |                 _mm_storeu_si128(b_arr.as_mut_ptr().add(8) as *mut __m128i, b_u8_hi);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm_storeu_si128` is unsafe and requires unsafe block","spans":[{"byte_end":43548,"byte_start":43480,"column_end":85,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":982,"line_start":982,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":17,"text":"                _mm_storeu_si128(b_arr.as_mut_ptr().add(8) as *mut __m128i, b_u8_hi);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block\n   --> src/visualizer.rs:982:34\n    |\n982 |                 _mm_storeu_si128(b_arr.as_mut_ptr().add(8) as *mut __m128i, b_u8_hi);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block","spans":[{"byte_end":43522,"byte_start":43497,"column_end":59,"column_start":34,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":982,"line_start":982,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":34,"text":"                _mm_storeu_si128(b_arr.as_mut_ptr().add(8) as *mut __m128i, b_u8_hi);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1038:30\n     |\n1038 |                 let r1_vec = _mm256_loadu_ps(r1_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n    --> src/visualizer.rs:1005:9\n     |\n1005 |         pub unsafe fn blend_pixels_batch_avx2(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":44472,"byte_start":44365,"column_end":116,"column_start":9,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1005,"line_start":1005,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":9,"text":"        pub unsafe fn blend_pixels_batch_avx2(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":44473,"byte_start":44473,"column_end":117,"column_start":117,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1005,"line_start":1005,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":117,"highlight_start":117,"text":"        pub unsafe fn blend_pixels_batch_avx2(pixels1: &[Rgb<u8>], pixels2: &[Rgb<u8>], alpha: f32) -> Vec<Rgb<u8>> {"}]},{"byte_end":48225,"byte_start":48225,"column_end":10,"column_start":10,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1085,"line_start":1085,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":10,"highlight_start":10,"text":"        }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":45915,"byte_start":45885,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1038,"line_start":1038,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let r1_vec = _mm256_loadu_ps(r1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1039:30\n     |\n1039 |                 let g1_vec = _mm256_loadu_ps(g1_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":45976,"byte_start":45946,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1039,"line_start":1039,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let g1_vec = _mm256_loadu_ps(g1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1040:30\n     |\n1040 |                 let b1_vec = _mm256_loadu_ps(b1_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":46037,"byte_start":46007,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1040,"line_start":1040,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let b1_vec = _mm256_loadu_ps(b1_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1042:30\n     |\n1042 |                 let r2_vec = _mm256_loadu_ps(r2_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":46099,"byte_start":46069,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1042,"line_start":1042,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let r2_vec = _mm256_loadu_ps(r2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1043:30\n     |\n1043 |                 let g2_vec = _mm256_loadu_ps(g2_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":46160,"byte_start":46130,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1043,"line_start":1043,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let g2_vec = _mm256_loadu_ps(g2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1044:30\n     |\n1044 |                 let b2_vec = _mm256_loadu_ps(b2_f.as_ptr());\n     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_loadu_ps` is unsafe and requires unsafe block","spans":[{"byte_end":46221,"byte_start":46191,"column_end":60,"column_start":30,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1044,"line_start":1044,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":30,"text":"                let b2_vec = _mm256_loadu_ps(b2_f.as_ptr());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1066:17\n     |\n1066 |                 _mm256_storeu_si256(r_arr.as_mut_ptr() as *mut __m256i, r_i32);\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block","spans":[{"byte_end":47441,"byte_start":47379,"column_end":79,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1066,"line_start":1066,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":17,"text":"                _mm256_storeu_si256(r_arr.as_mut_ptr() as *mut __m256i, r_i32);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1067:17\n     |\n1067 |                 _mm256_storeu_si256(g_arr.as_mut_ptr() as *mut __m256i, g_i32);\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block","spans":[{"byte_end":47521,"byte_start":47459,"column_end":79,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1067,"line_start":1067,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":17,"text":"                _mm256_storeu_si256(g_arr.as_mut_ptr() as *mut __m256i, g_i32);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1068:17\n     |\n1068 |                 _mm256_storeu_si256(b_arr.as_mut_ptr() as *mut __m256i, b_i32);\n     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_si256` is unsafe and requires unsafe block","spans":[{"byte_end":47601,"byte_start":47539,"column_end":79,"column_start":17,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1068,"line_start":1068,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":79,"highlight_start":17,"text":"                _mm256_storeu_si256(b_arr.as_mut_ptr() as *mut __m256i, b_i32);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1594:13\n     |\n1594 |             _mm256_storeu_pd(x_frac_arr.as_mut_ptr(), x_frac);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\nnote: an unsafe function restricts its caller, but its body is safe by default\n    --> src/visualizer.rs:1542:5\n     |\n1542 |     unsafe fn get_batch_simd(&self, coords: &[(f64, f64)]) -> Vec<f64> {\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"an unsafe function restricts its caller, but its body is safe by default","rendered":null,"spans":[{"byte_end":66271,"byte_start":66205,"column_end":71,"column_start":5,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1542,"line_start":1542,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":5,"text":"    unsafe fn get_batch_simd(&self, coords: &[(f64, f64)]) -> Vec<f64> {"}]}]},{"children":[],"code":null,"level":"help","message":"consider wrapping the function body in an unsafe block","rendered":null,"spans":[{"byte_end":66272,"byte_start":66272,"column_end":72,"column_start":72,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1542,"line_start":1542,"suggested_replacement":"{ unsafe ","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":72,"highlight_start":72,"text":"    unsafe fn get_batch_simd(&self, coords: &[(f64, f64)]) -> Vec<f64> {"}]},{"byte_end":70223,"byte_start":70223,"column_end":6,"column_start":6,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":null,"line_end":1628,"line_start":1628,"suggested_replacement":"}","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":6,"highlight_start":6,"text":"    }"}]}]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":68713,"byte_start":68664,"column_end":62,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1594,"line_start":1594,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":13,"text":"            _mm256_storeu_pd(x_frac_arr.as_mut_ptr(), x_frac);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1595:13\n     |\n1595 |             _mm256_storeu_pd(y_frac_arr.as_mut_ptr(), y_frac);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":68776,"byte_start":68727,"column_end":62,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1595,"line_start":1595,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":13,"text":"            _mm256_storeu_pd(y_frac_arr.as_mut_ptr(), y_frac);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1596:13\n     |\n1596 |             _mm256_storeu_pd(x_floor_arr.as_mut_ptr(), x_floor);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":68841,"byte_start":68790,"column_end":64,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1596,"line_start":1596,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":13,"text":"            _mm256_storeu_pd(x_floor_arr.as_mut_ptr(), x_floor);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1597:13\n     |\n1597 |             _mm256_storeu_pd(y_floor_arr.as_mut_ptr(), y_floor);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":68906,"byte_start":68855,"column_end":64,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1597,"line_start":1597,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":13,"text":"            _mm256_storeu_pd(y_floor_arr.as_mut_ptr(), y_floor);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1601:13\n     |\n1601 |             _mm256_storeu_pd(u_arr.as_mut_ptr(), u_vec);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":69046,"byte_start":69003,"column_end":56,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1601,"line_start":1601,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":13,"text":"            _mm256_storeu_pd(u_arr.as_mut_ptr(), u_vec);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning[E0133]: call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block\n    --> src/visualizer.rs:1602:13\n     |\n1602 |             _mm256_storeu_pd(v_arr.as_mut_ptr(), v_vec);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n     |\n     = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>\n     = note: consult the function's documentation for information on how to avoid undefined behavior\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consult the function's documentation for information on how to avoid undefined behavior","rendered":null,"spans":[]}],"code":{"code":"E0133","explanation":"Unsafe code was used outside of an unsafe block.\n\nErroneous code example:\n\n```compile_fail,E0133\nunsafe fn f() { return; } // This is the unsafe code\n\nfn main() {\n    f(); // error: call to unsafe function requires unsafe function or block\n}\n```\n\nUsing unsafe functionality is potentially dangerous and disallowed by safety\nchecks. Examples:\n\n* Dereferencing raw pointers\n* Calling functions via FFI\n* Calling functions marked unsafe\n\nThese safety checks can be relaxed for a section of the code by wrapping the\nunsafe instructions with an `unsafe` block. For instance:\n\n```\nunsafe fn f() { return; }\n\nfn main() {\n    unsafe { f(); } // ok!\n}\n```\n\nSee the [unsafe section][unsafe-section] of the Book for more details.\n\n#### Unsafe code in functions\n\nUnsafe code is currently accepted in unsafe functions, but that is being phased\nout in favor of requiring unsafe blocks here too.\n\n```\nunsafe fn f() { return; }\n\nunsafe fn g() {\n    f(); // Is accepted, but no longer recommended\n    unsafe { f(); } // Recommended way to write this\n}\n```\n\nLinting against this is controlled via the `unsafe_op_in_unsafe_fn` lint, which\nis `warn` by default in the 2024 edition and `allow` by default in earlier\neditions.\n\n[unsafe-section]: https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n"},"level":"warning","message":"call to unsafe function `std::arch::x86_64::_mm256_storeu_pd` is unsafe and requires unsafe block","spans":[{"byte_end":69103,"byte_start":69060,"column_end":56,"column_start":13,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"call to unsafe function","line_end":1602,"line_start":1602,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":13,"text":"            _mm256_storeu_pd(v_arr.as_mut_ptr(), v_vec);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unnecessary `unsafe` block\n    --> src/visualizer.rs:1831:26\n     |\n1831 |             let sum_sq = unsafe { audio_simd::sum_squares_f32(&aligned_samples) };\n     |                          ^^^^^^ unnecessary `unsafe` block\n     |\n     = note: `#[warn(unused_unsafe)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_unsafe)]` on by default","rendered":null,"spans":[]}],"code":{"code":"unused_unsafe","explanation":null},"level":"warning","message":"unnecessary `unsafe` block","spans":[{"byte_end":76590,"byte_start":76584,"column_end":32,"column_start":26,"expansion":null,"file_name":"src/visualizer.rs","is_primary":true,"label":"unnecessary `unsafe` block","line_end":1831,"line_start":1831,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":26,"text":"            let sum_sq = unsafe { audio_simd::sum_squares_f32(&aligned_samples) };"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0133`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0133`.","spans":[]}}
{"reason":"compiler-artifact","package_id":"path+file:///home/rayan/Documents/git/qoa#0.3.3","manifest_path":"/home/rayan/Documents/git/qoa/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"qoa","src_path":"/home/rayan/Documents/git/qoa/src/main.rs","edition":"2024","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"1","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","pure-rust-math"],"filenames":["/home/rayan/Documents/git/qoa/target/debug/qoa"],"executable":"/home/rayan/Documents/git/qoa/target/debug/qoa","fresh":false}
{"reason":"build-finished","success":true}
