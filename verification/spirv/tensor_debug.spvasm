; SPIR-V
; Version: 1.0
; Generator: Google Shaderc over Glslang; 11
; Bound: 239
; Schema: 0
               OpCapability Shader
          %2 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_GlobalInvocationID
               OpExecutionMode %main LocalSize 32 1 1
          %1 = OpString "/home/rayan/Documents/git/qoa/src/kernel/shaders/tensor.comp"
               OpSource GLSL 450 %1 "// OpModuleProcessed entry-point main
// OpModuleProcessed client vulkan100
// OpModuleProcessed target-env vulkan1.0
// OpModuleProcessed entry-point main
#line 1
#version 450
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_quad: enable
#extension GL_KHR_shader_subgroup_clustered: enable

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// complex number struct for the math library
struct Complex {
    float real;
    float imag;
};

// a math library for complex numbers
Complex complex_add(Complex a, Complex b) {
    return Complex(a.real + b.real, a.imag + b.imag);
}

Complex complex_sub(Complex a, Complex b) {
    return Complex(a.real - b.real, a.imag - b.imag);
}

Complex complex_mul(Complex a, Complex b) {
    return Complex(a.real * b.real - a.imag * b.imag, a.real * b.imag + a.imag * b.real);
}

Complex complex_scale(Complex a, float s) {
    return Complex(a.real * s, a.imag * s);
}

// storage buffer for the quantum state vector
layout(set = 0, binding = 0) buffer StateVector {
    Complex state[];
} state_vector;

// uniform buffer for gate parameters
layout(set = 0, binding = 1) uniform GateParams {
    uint gate_type;
    uint target_qubit;
    uint num_qubits;
} gate_params;

void main() {
    // get the global invocation id
    uint i = gl_GlobalInvocationID.x;

    // check if the current thread should be active
    uint total_states = 1 << gate_params.num_qubits;
    if (i >= total_states) {
        return;
    }

    uint stride = 1 << gate_params.target_qubit;
    uint target_bit = (i >> gate_params.target_qubit) & 1;

    // handle the gates based on the uniform parameter
    switch (gate_params.gate_type) {
        // hadamard gate
        case 0:
            // only process pairs where the target bit is 0
            if (target_bit == 0) {
                uint j = i | stride;
                Complex a = state_vector.state[i];
                Complex b = state_vector.state[j];
                
                float inv_sqrt2 = 0.707106781;
                Complex new_a = complex_scale(complex_add(a, b), inv_sqrt2);
                Complex new_b = complex_scale(complex_sub(a, b), inv_sqrt2);

                state_vector.state[i] = new_a;
                state_vector.state[j] = new_b;
            }
            break;

        // pauli-x gate
        case 1:
            // only process pairs where the target bit is 0
            if (target_bit == 0) {
                uint j = i | stride;
                Complex temp_i = state_vector.state[i];
                Complex temp_j = state_vector.state[j];
                
                state_vector.state[i] = temp_j;
                state_vector.state[j] = temp_i;
            }
            break;

        // pauli-z gate
        case 2:
            // only negate the amplitude if the target bit is 1
            if (target_bit == 1) {
                state_vector.state[i].real = -state_vector.state[i].real;
                state_vector.state[i].imag = -state_vector.state[i].imag;
            }
            break;

        default:
            // no operation for unknown gates
            break;
    }
}
"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpSourceExtension "GL_KHR_shader_subgroup_arithmetic"
               OpSourceExtension "GL_KHR_shader_subgroup_ballot"
               OpSourceExtension "GL_KHR_shader_subgroup_basic"
               OpSourceExtension "GL_KHR_shader_subgroup_clustered"
               OpSourceExtension "GL_KHR_shader_subgroup_quad"
               OpName %main "main"
               OpName %Complex "Complex"
               OpMemberName %Complex 0 "real"
               OpMemberName %Complex 1 "imag"
               OpName %complex_add_struct_Complex_f1_f11_struct_Complex_f1_f11_ "complex_add(struct-Complex-f1-f11;struct-Complex-f1-f11;"
               OpName %a "a"
               OpName %b "b"
               OpName %complex_sub_struct_Complex_f1_f11_struct_Complex_f1_f11_ "complex_sub(struct-Complex-f1-f11;struct-Complex-f1-f11;"
               OpName %a_0 "a"
               OpName %b_0 "b"
               OpName %complex_scale_struct_Complex_f1_f11_f1_ "complex_scale(struct-Complex-f1-f11;f1;"
               OpName %a_1 "a"
               OpName %s "s"
               OpName %i "i"
               OpName %gl_GlobalInvocationID "gl_GlobalInvocationID"
               OpName %total_states "total_states"
               OpName %GateParams "GateParams"
               OpMemberName %GateParams 0 "gate_type"
               OpMemberName %GateParams 1 "target_qubit"
               OpMemberName %GateParams 2 "num_qubits"
               OpName %gate_params "gate_params"
               OpName %stride "stride"
               OpName %target_bit "target_bit"
               OpName %j "j"
               OpName %a_2 "a"
               OpName %Complex_0 "Complex"
               OpMemberName %Complex_0 0 "real"
               OpMemberName %Complex_0 1 "imag"
               OpName %StateVector "StateVector"
               OpMemberName %StateVector 0 "state"
               OpName %state_vector "state_vector"
               OpName %b_1 "b"
               OpName %inv_sqrt2 "inv_sqrt2"
               OpName %new_a "new_a"
               OpName %param "param"
               OpName %param_0 "param"
               OpName %param_1 "param"
               OpName %param_2 "param"
               OpName %new_b "new_b"
               OpName %param_3 "param"
               OpName %param_4 "param"
               OpName %param_5 "param"
               OpName %param_6 "param"
               OpName %j_0 "j"
               OpName %temp_i "temp_i"
               OpName %temp_j "temp_j"
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %GateParams Block
               OpMemberDecorate %GateParams 0 Offset 0
               OpMemberDecorate %GateParams 1 Offset 4
               OpMemberDecorate %GateParams 2 Offset 8
               OpDecorate %gate_params Binding 1
               OpDecorate %gate_params DescriptorSet 0
               OpMemberDecorate %Complex_0 0 Offset 0
               OpMemberDecorate %Complex_0 1 Offset 4
               OpDecorate %_runtimearr_Complex_0 ArrayStride 8
               OpDecorate %StateVector BufferBlock
               OpMemberDecorate %StateVector 0 Offset 0
               OpDecorate %state_vector Binding 0
               OpDecorate %state_vector DescriptorSet 0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %4 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %Complex = OpTypeStruct %float %float
%_ptr_Function_Complex = OpTypePointer Function %Complex
         %10 = OpTypeFunction %Complex %_ptr_Function_Complex %_ptr_Function_Complex
%_ptr_Function_float = OpTypePointer Function %float
         %20 = OpTypeFunction %Complex %_ptr_Function_Complex %_ptr_Function_float
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
      %int_1 = OpConstant %int 1
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
%_ptr_Input_uint = OpTypePointer Input %uint
 %GateParams = OpTypeStruct %uint %uint %uint
%_ptr_Uniform_GateParams = OpTypePointer Uniform %GateParams
%gate_params = OpVariable %_ptr_Uniform_GateParams Uniform
      %int_2 = OpConstant %int 2
%_ptr_Uniform_uint = OpTypePointer Uniform %uint
       %bool = OpTypeBool
     %uint_1 = OpConstant %uint 1
  %Complex_0 = OpTypeStruct %float %float
%_runtimearr_Complex_0 = OpTypeRuntimeArray %Complex_0
%StateVector = OpTypeStruct %_runtimearr_Complex_0
%_ptr_Uniform_StateVector = OpTypePointer Uniform %StateVector
%state_vector = OpVariable %_ptr_Uniform_StateVector Uniform
%_ptr_Uniform_Complex_0 = OpTypePointer Uniform %Complex_0
%float_0_707106769 = OpConstant %float 0.707106769
%_ptr_Uniform_float = OpTypePointer Uniform %float
    %uint_32 = OpConstant %uint 32
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_32 %uint_1 %uint_1
               OpLine %1 44 11
       %main = OpFunction %void None %4
          %6 = OpLabel
          %i = OpVariable %_ptr_Function_uint Function
%total_states = OpVariable %_ptr_Function_uint Function
     %stride = OpVariable %_ptr_Function_uint Function
 %target_bit = OpVariable %_ptr_Function_uint Function
          %j = OpVariable %_ptr_Function_uint Function
        %a_2 = OpVariable %_ptr_Function_Complex Function
        %b_1 = OpVariable %_ptr_Function_Complex Function
  %inv_sqrt2 = OpVariable %_ptr_Function_float Function
      %new_a = OpVariable %_ptr_Function_Complex Function
      %param = OpVariable %_ptr_Function_Complex Function
    %param_0 = OpVariable %_ptr_Function_Complex Function
    %param_1 = OpVariable %_ptr_Function_Complex Function
    %param_2 = OpVariable %_ptr_Function_float Function
      %new_b = OpVariable %_ptr_Function_Complex Function
    %param_3 = OpVariable %_ptr_Function_Complex Function
    %param_4 = OpVariable %_ptr_Function_Complex Function
    %param_5 = OpVariable %_ptr_Function_Complex Function
    %param_6 = OpVariable %_ptr_Function_float Function
        %j_0 = OpVariable %_ptr_Function_uint Function
     %temp_i = OpVariable %_ptr_Function_Complex Function
     %temp_j = OpVariable %_ptr_Function_Complex Function
               OpLine %1 46 0
         %73 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %74 = OpLoad %uint %73
               OpStore %i %74
               OpLine %1 49 0
         %81 = OpAccessChain %_ptr_Uniform_uint %gate_params %int_2
         %82 = OpLoad %uint %81
         %83 = OpShiftLeftLogical %int %int_1 %82
         %84 = OpBitcast %uint %83
               OpStore %total_states %84
               OpLine %1 50 0
         %85 = OpLoad %uint %i
         %86 = OpLoad %uint %total_states
         %88 = OpUGreaterThanEqual %bool %85 %86
               OpSelectionMerge %90 None
               OpBranchConditional %88 %89 %90
         %89 = OpLabel
               OpLine %1 51 0
               OpReturn
         %90 = OpLabel
               OpLine %1 54 0
         %93 = OpAccessChain %_ptr_Uniform_uint %gate_params %int_1
         %94 = OpLoad %uint %93
         %95 = OpShiftLeftLogical %int %int_1 %94
         %96 = OpBitcast %uint %95
               OpStore %stride %96
               OpLine %1 55 0
         %98 = OpLoad %uint %i
         %99 = OpAccessChain %_ptr_Uniform_uint %gate_params %int_1
        %100 = OpLoad %uint %99
        %101 = OpShiftRightLogical %uint %98 %100
        %103 = OpBitwiseAnd %uint %101 %uint_1
               OpStore %target_bit %103
               OpLine %1 58 0
        %104 = OpAccessChain %_ptr_Uniform_uint %gate_params %int_0
        %105 = OpLoad %uint %104
               OpSelectionMerge %110 None
               OpSwitch %105 %109 0 %106 1 %107 2 %108
        %109 = OpLabel
               OpLine %1 100 0
               OpBranch %110
        %106 = OpLabel
               OpLine %1 62 0
        %111 = OpLoad %uint %target_bit
        %112 = OpIEqual %bool %111 %uint_0
               OpSelectionMerge %114 None
               OpBranchConditional %112 %113 %114
        %113 = OpLabel
               OpLine %1 63 0
        %116 = OpLoad %uint %i
        %117 = OpLoad %uint %stride
        %118 = OpBitwiseOr %uint %116 %117
               OpStore %j %118
               OpLine %1 64 0
        %125 = OpLoad %uint %i
        %127 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %125
        %128 = OpLoad %Complex_0 %127
        %129 = OpCompositeExtract %float %128 0
        %130 = OpAccessChain %_ptr_Function_float %a_2 %int_0
               OpStore %130 %129
        %131 = OpCompositeExtract %float %128 1
        %132 = OpAccessChain %_ptr_Function_float %a_2 %int_1
               OpStore %132 %131
               OpLine %1 65 0
        %134 = OpLoad %uint %j
        %135 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %134
        %136 = OpLoad %Complex_0 %135
        %137 = OpCompositeExtract %float %136 0
        %138 = OpAccessChain %_ptr_Function_float %b_1 %int_0
               OpStore %138 %137
        %139 = OpCompositeExtract %float %136 1
        %140 = OpAccessChain %_ptr_Function_float %b_1 %int_1
               OpStore %140 %139
               OpLine %1 67 0
               OpStore %inv_sqrt2 %float_0_707106769
               OpLine %1 68 0
        %145 = OpLoad %Complex %a_2
               OpStore %param %145
        %147 = OpLoad %Complex %b_1
               OpStore %param_0 %147
        %148 = OpFunctionCall %Complex %complex_add_struct_Complex_f1_f11_struct_Complex_f1_f11_ %param %param_0
               OpStore %param_1 %148
        %151 = OpLoad %float %inv_sqrt2
               OpStore %param_2 %151
        %152 = OpFunctionCall %Complex %complex_scale_struct_Complex_f1_f11_f1_ %param_1 %param_2
               OpStore %new_a %152
               OpLine %1 69 0
        %155 = OpLoad %Complex %a_2
               OpStore %param_3 %155
        %157 = OpLoad %Complex %b_1
               OpStore %param_4 %157
        %158 = OpFunctionCall %Complex %complex_sub_struct_Complex_f1_f11_struct_Complex_f1_f11_ %param_3 %param_4
               OpStore %param_5 %158
        %161 = OpLoad %float %inv_sqrt2
               OpStore %param_6 %161
        %162 = OpFunctionCall %Complex %complex_scale_struct_Complex_f1_f11_f1_ %param_5 %param_6
               OpStore %new_b %162
               OpLine %1 71 0
        %163 = OpLoad %uint %i
        %164 = OpLoad %Complex %new_a
        %165 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %163
        %166 = OpCompositeExtract %float %164 0
        %168 = OpAccessChain %_ptr_Uniform_float %165 %int_0
               OpStore %168 %166
        %169 = OpCompositeExtract %float %164 1
        %170 = OpAccessChain %_ptr_Uniform_float %165 %int_1
               OpStore %170 %169
               OpLine %1 72 0
        %171 = OpLoad %uint %j
        %172 = OpLoad %Complex %new_b
        %173 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %171
        %174 = OpCompositeExtract %float %172 0
        %175 = OpAccessChain %_ptr_Uniform_float %173 %int_0
               OpStore %175 %174
        %176 = OpCompositeExtract %float %172 1
        %177 = OpAccessChain %_ptr_Uniform_float %173 %int_1
               OpStore %177 %176
               OpBranch %114
        %114 = OpLabel
               OpLine %1 74 0
               OpBranch %110
        %107 = OpLabel
               OpLine %1 79 0
        %179 = OpLoad %uint %target_bit
        %180 = OpIEqual %bool %179 %uint_0
               OpSelectionMerge %182 None
               OpBranchConditional %180 %181 %182
        %181 = OpLabel
               OpLine %1 80 0
        %184 = OpLoad %uint %i
        %185 = OpLoad %uint %stride
        %186 = OpBitwiseOr %uint %184 %185
               OpStore %j_0 %186
               OpLine %1 81 0
        %188 = OpLoad %uint %i
        %189 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %188
        %190 = OpLoad %Complex_0 %189
        %191 = OpCompositeExtract %float %190 0
        %192 = OpAccessChain %_ptr_Function_float %temp_i %int_0
               OpStore %192 %191
        %193 = OpCompositeExtract %float %190 1
        %194 = OpAccessChain %_ptr_Function_float %temp_i %int_1
               OpStore %194 %193
               OpLine %1 82 0
        %196 = OpLoad %uint %j_0
        %197 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %196
        %198 = OpLoad %Complex_0 %197
        %199 = OpCompositeExtract %float %198 0
        %200 = OpAccessChain %_ptr_Function_float %temp_j %int_0
               OpStore %200 %199
        %201 = OpCompositeExtract %float %198 1
        %202 = OpAccessChain %_ptr_Function_float %temp_j %int_1
               OpStore %202 %201
               OpLine %1 84 0
        %203 = OpLoad %uint %i
        %204 = OpLoad %Complex %temp_j
        %205 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %203
        %206 = OpCompositeExtract %float %204 0
        %207 = OpAccessChain %_ptr_Uniform_float %205 %int_0
               OpStore %207 %206
        %208 = OpCompositeExtract %float %204 1
        %209 = OpAccessChain %_ptr_Uniform_float %205 %int_1
               OpStore %209 %208
               OpLine %1 85 0
        %210 = OpLoad %uint %j_0
        %211 = OpLoad %Complex %temp_i
        %212 = OpAccessChain %_ptr_Uniform_Complex_0 %state_vector %int_0 %210
        %213 = OpCompositeExtract %float %211 0
        %214 = OpAccessChain %_ptr_Uniform_float %212 %int_0
               OpStore %214 %213
        %215 = OpCompositeExtract %float %211 1
        %216 = OpAccessChain %_ptr_Uniform_float %212 %int_1
               OpStore %216 %215
               OpBranch %182
        %182 = OpLabel
               OpLine %1 87 0
               OpBranch %110
        %108 = OpLabel
               OpLine %1 92 0
        %218 = OpLoad %uint %target_bit
        %219 = OpIEqual %bool %218 %uint_1
               OpSelectionMerge %221 None
               OpBranchConditional %219 %220 %221
        %220 = OpLabel
               OpLine %1 93 0
        %222 = OpLoad %uint %i
        %223 = OpLoad %uint %i
        %224 = OpAccessChain %_ptr_Uniform_float %state_vector %int_0 %223 %int_0
        %225 = OpLoad %float %224
        %226 = OpFNegate %float %225
        %227 = OpAccessChain %_ptr_Uniform_float %state_vector %int_0 %222 %int_0
               OpStore %227 %226
               OpLine %1 94 0
        %228 = OpLoad %uint %i
        %229 = OpLoad %uint %i
        %230 = OpAccessChain %_ptr_Uniform_float %state_vector %int_0 %229 %int_1
        %231 = OpLoad %float %230
        %232 = OpFNegate %float %231
        %233 = OpAccessChain %_ptr_Uniform_float %state_vector %int_0 %228 %int_1
               OpStore %233 %232
               OpBranch %221
        %221 = OpLabel
               OpLine %1 96 0
               OpBranch %110
        %110 = OpLabel
               OpLine %1 102 0
               OpReturn
               OpFunctionEnd
               OpLine %1 16 41
%complex_add_struct_Complex_f1_f11_struct_Complex_f1_f11_ = OpFunction %Complex None %10
          %a = OpFunctionParameter %_ptr_Function_Complex
          %b = OpFunctionParameter %_ptr_Function_Complex
         %14 = OpLabel
               OpLine %1 17 0
         %27 = OpAccessChain %_ptr_Function_float %a %int_0
         %28 = OpLoad %float %27
         %29 = OpAccessChain %_ptr_Function_float %b %int_0
         %30 = OpLoad %float %29
         %31 = OpFAdd %float %28 %30
         %33 = OpAccessChain %_ptr_Function_float %a %int_1
         %34 = OpLoad %float %33
         %35 = OpAccessChain %_ptr_Function_float %b %int_1
         %36 = OpLoad %float %35
         %37 = OpFAdd %float %34 %36
         %38 = OpCompositeConstruct %Complex %31 %37
               OpReturnValue %38
               OpFunctionEnd
               OpLine %1 20 41
%complex_sub_struct_Complex_f1_f11_struct_Complex_f1_f11_ = OpFunction %Complex None %10
        %a_0 = OpFunctionParameter %_ptr_Function_Complex
        %b_0 = OpFunctionParameter %_ptr_Function_Complex
         %18 = OpLabel
               OpLine %1 21 0
         %41 = OpAccessChain %_ptr_Function_float %a_0 %int_0
         %42 = OpLoad %float %41
         %43 = OpAccessChain %_ptr_Function_float %b_0 %int_0
         %44 = OpLoad %float %43
         %45 = OpFSub %float %42 %44
         %46 = OpAccessChain %_ptr_Function_float %a_0 %int_1
         %47 = OpLoad %float %46
         %48 = OpAccessChain %_ptr_Function_float %b_0 %int_1
         %49 = OpLoad %float %48
         %50 = OpFSub %float %47 %49
         %51 = OpCompositeConstruct %Complex %45 %50
               OpReturnValue %51
               OpFunctionEnd
               OpLine %1 28 41
%complex_scale_struct_Complex_f1_f11_f1_ = OpFunction %Complex None %20
        %a_1 = OpFunctionParameter %_ptr_Function_Complex
          %s = OpFunctionParameter %_ptr_Function_float
         %24 = OpLabel
               OpLine %1 29 0
         %54 = OpAccessChain %_ptr_Function_float %a_1 %int_0
         %55 = OpLoad %float %54
         %56 = OpLoad %float %s
         %57 = OpFMul %float %55 %56
         %58 = OpAccessChain %_ptr_Function_float %a_1 %int_1
         %59 = OpLoad %float %58
         %60 = OpLoad %float %s
         %61 = OpFMul %float %59 %60
         %62 = OpCompositeConstruct %Complex %57 %61
               OpReturnValue %62
               OpFunctionEnd
