; SPIR-V
; Version: 1.0
; Generator: Google Shaderc over Glslang; 11
; Bound: 106
; Schema: 0
               OpCapability Shader
          %2 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_GlobalInvocationID
               OpExecutionMode %main LocalSize 32 1 1
          %1 = OpString "/home/rayan/Documents/git/qoa/src/kernel/shaders/swap.comp"
               OpSource GLSL 450 %1 "// OpModuleProcessed entry-point main
// OpModuleProcessed client vulkan100
// OpModuleProcessed target-env vulkan1.0
// OpModuleProcessed entry-point main
#line 1
#version 450
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// state vector (complex numbers stored as pairs of floats)
layout(std430, binding = 0) buffer StateVector {
    vec2 state[];
};

// gate parameters
layout(std140, binding = 1) uniform GateParams {
    // using target_qubit for the first qubit
    uint target_qubit;
    // using num_qubits for the second qubit
    uint second_qubit;
    // total qubits in separate field
    uint num_qubits;
} params;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    uint state_size = 1u << params.num_qubits;

    // return if index is out of bounds
    if (gid >= state_size) {
        return;
    }

    // calculate bitmasks for the qubits
    uint q0_mask = 1u << params.target_qubit;
    uint q1_mask = 1u << params.second_qubit;

    // check the state of the two qubits
    bool q0_state = (gid & q0_mask) != 0;
    bool q1_state = (gid & q1_mask) != 0;

    // we only need to swap if one qubit is 0 and the other is 1
    if (q0_state != q1_state) {
        // compute the swapped index
        uint swapped_idx = (gid & ~q0_mask & ~q1_mask) | (q1_state ? q0_mask : 0u) | (q0_state ? q1_mask : 0u);

        // only process the smaller index to prevent race conditions
        if (gid < swapped_idx) {
            vec2 amp_0 = state[gid];
            vec2 amp_1 = state[swapped_idx];

            state[gid] = amp_1;
            state[swapped_idx] = amp_0;
        }
    }
}"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %gid "gid"
               OpName %gl_GlobalInvocationID "gl_GlobalInvocationID"
               OpName %state_size "state_size"
               OpName %GateParams "GateParams"
               OpMemberName %GateParams 0 "target_qubit"
               OpMemberName %GateParams 1 "second_qubit"
               OpMemberName %GateParams 2 "num_qubits"
               OpName %params "params"
               OpName %q0_mask "q0_mask"
               OpName %q1_mask "q1_mask"
               OpName %q0_state "q0_state"
               OpName %q1_state "q1_state"
               OpName %swapped_idx "swapped_idx"
               OpName %amp_0 "amp_0"
               OpName %StateVector "StateVector"
               OpMemberName %StateVector 0 "state"
               OpName %_ ""
               OpName %amp_1 "amp_1"
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId
               OpDecorate %GateParams Block
               OpMemberDecorate %GateParams 0 Offset 0
               OpMemberDecorate %GateParams 1 Offset 4
               OpMemberDecorate %GateParams 2 Offset 8
               OpDecorate %params Binding 1
               OpDecorate %params DescriptorSet 0
               OpDecorate %_runtimearr_v2float ArrayStride 8
               OpDecorate %StateVector BufferBlock
               OpMemberDecorate %StateVector 0 Offset 0
               OpDecorate %_ Binding 0
               OpDecorate %_ DescriptorSet 0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %4 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
     %v3uint = OpTypeVector %uint 3
%_ptr_Input_v3uint = OpTypePointer Input %v3uint
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input
     %uint_0 = OpConstant %uint 0
%_ptr_Input_uint = OpTypePointer Input %uint
     %uint_1 = OpConstant %uint 1
 %GateParams = OpTypeStruct %uint %uint %uint
%_ptr_Uniform_GateParams = OpTypePointer Uniform %GateParams
     %params = OpVariable %_ptr_Uniform_GateParams Uniform
        %int = OpTypeInt 32 1
      %int_2 = OpConstant %int 2
%_ptr_Uniform_uint = OpTypePointer Uniform %uint
       %bool = OpTypeBool
      %int_0 = OpConstant %int 0
      %int_1 = OpConstant %int 1
%_ptr_Function_bool = OpTypePointer Function %bool
      %float = OpTypeFloat 32
    %v2float = OpTypeVector %float 2
%_ptr_Function_v2float = OpTypePointer Function %v2float
%_runtimearr_v2float = OpTypeRuntimeArray %v2float
%StateVector = OpTypeStruct %_runtimearr_v2float
%_ptr_Uniform_StateVector = OpTypePointer Uniform %StateVector
          %_ = OpVariable %_ptr_Uniform_StateVector Uniform
%_ptr_Uniform_v2float = OpTypePointer Uniform %v2float
    %uint_32 = OpConstant %uint 32
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_32 %uint_1 %uint_1
               OpLine %1 19 11
       %main = OpFunction %void None %4
          %6 = OpLabel
        %gid = OpVariable %_ptr_Function_uint Function
 %state_size = OpVariable %_ptr_Function_uint Function
    %q0_mask = OpVariable %_ptr_Function_uint Function
    %q1_mask = OpVariable %_ptr_Function_uint Function
   %q0_state = OpVariable %_ptr_Function_bool Function
   %q1_state = OpVariable %_ptr_Function_bool Function
%swapped_idx = OpVariable %_ptr_Function_uint Function
      %amp_0 = OpVariable %_ptr_Function_v2float Function
      %amp_1 = OpVariable %_ptr_Function_v2float Function
               OpLine %1 20 0
         %15 = OpAccessChain %_ptr_Input_uint %gl_GlobalInvocationID %uint_0
         %16 = OpLoad %uint %15
               OpStore %gid %16
               OpLine %1 21 0
         %25 = OpAccessChain %_ptr_Uniform_uint %params %int_2
         %26 = OpLoad %uint %25
         %27 = OpShiftLeftLogical %uint %uint_1 %26
               OpStore %state_size %27
               OpLine %1 24 0
         %28 = OpLoad %uint %gid
         %29 = OpLoad %uint %state_size
         %31 = OpUGreaterThanEqual %bool %28 %29
               OpSelectionMerge %33 None
               OpBranchConditional %31 %32 %33
         %32 = OpLabel
               OpLine %1 25 0
               OpReturn
         %33 = OpLabel
               OpLine %1 29 0
         %37 = OpAccessChain %_ptr_Uniform_uint %params %int_0
         %38 = OpLoad %uint %37
         %39 = OpShiftLeftLogical %uint %uint_1 %38
               OpStore %q0_mask %39
               OpLine %1 30 0
         %42 = OpAccessChain %_ptr_Uniform_uint %params %int_1
         %43 = OpLoad %uint %42
         %44 = OpShiftLeftLogical %uint %uint_1 %43
               OpStore %q1_mask %44
               OpLine %1 33 0
         %47 = OpLoad %uint %gid
         %48 = OpLoad %uint %q0_mask
         %49 = OpBitwiseAnd %uint %47 %48
         %50 = OpINotEqual %bool %49 %uint_0
               OpStore %q0_state %50
               OpLine %1 34 0
         %52 = OpLoad %uint %gid
         %53 = OpLoad %uint %q1_mask
         %54 = OpBitwiseAnd %uint %52 %53
         %55 = OpINotEqual %bool %54 %uint_0
               OpStore %q1_state %55
               OpLine %1 37 0
         %56 = OpLoad %bool %q0_state
         %57 = OpLoad %bool %q1_state
         %58 = OpLogicalNotEqual %bool %56 %57
               OpSelectionMerge %60 None
               OpBranchConditional %58 %59 %60
         %59 = OpLabel
               OpLine %1 39 0
         %62 = OpLoad %uint %gid
         %63 = OpLoad %uint %q0_mask
         %64 = OpNot %uint %63
         %65 = OpBitwiseAnd %uint %62 %64
         %66 = OpLoad %uint %q1_mask
         %67 = OpNot %uint %66
         %68 = OpBitwiseAnd %uint %65 %67
         %69 = OpLoad %bool %q1_state
         %70 = OpLoad %uint %q0_mask
         %71 = OpSelect %uint %69 %70 %uint_0
         %72 = OpBitwiseOr %uint %68 %71
         %73 = OpLoad %bool %q0_state
         %74 = OpLoad %uint %q1_mask
         %75 = OpSelect %uint %73 %74 %uint_0
         %76 = OpBitwiseOr %uint %72 %75
               OpStore %swapped_idx %76
               OpLine %1 42 0
         %77 = OpLoad %uint %gid
         %78 = OpLoad %uint %swapped_idx
         %79 = OpULessThan %bool %77 %78
               OpSelectionMerge %81 None
               OpBranchConditional %79 %80 %81
         %80 = OpLabel
               OpLine %1 43 0
         %90 = OpLoad %uint %gid
         %92 = OpAccessChain %_ptr_Uniform_v2float %_ %int_0 %90
         %93 = OpLoad %v2float %92
               OpStore %amp_0 %93
               OpLine %1 44 0
         %95 = OpLoad %uint %swapped_idx
         %96 = OpAccessChain %_ptr_Uniform_v2float %_ %int_0 %95
         %97 = OpLoad %v2float %96
               OpStore %amp_1 %97
               OpLine %1 46 0
         %98 = OpLoad %uint %gid
         %99 = OpLoad %v2float %amp_1
        %100 = OpAccessChain %_ptr_Uniform_v2float %_ %int_0 %98
               OpStore %100 %99
               OpLine %1 47 0
        %101 = OpLoad %uint %swapped_idx
        %102 = OpLoad %v2float %amp_0
        %103 = OpAccessChain %_ptr_Uniform_v2float %_ %int_0 %101
               OpStore %103 %102
               OpBranch %81
         %81 = OpLabel
               OpBranch %60
         %60 = OpLabel
               OpLine %1 50 0
               OpReturn
               OpFunctionEnd
