#version 450

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// State vector (complex numbers stored as pairs of floats)
layout(std430, binding = 0) buffer StateVector {
    vec2 state[];
};

// Gate parameters
layout(std140, binding = 1) uniform GateParams {
    uint gate_type;
    uint target_qubit;
    uint num_qubits;
    uint _pad;
} params;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    uint state_size = 1u << params.num_qubits;
    
    // Return if index is out of bounds
    if (gid >= state_size) {
        return;
    }
    
    // Compute paired index (flipping the target qubit)
    uint paired_idx = gid ^ (1u << params.target_qubit);
    
    // Only process the first index of each pair to avoid race conditions
    if (gid < paired_idx) {
        // Get current amplitudes
        vec2 amp_0 = state[gid];
        vec2 amp_1 = state[paired_idx];
        
        // Apply X gate (bit flip): swap amplitudes
        state[gid] = amp_1;
        state[paired_idx] = amp_0;
    }
}